<?php

namespace App\Controller;

use App\Entity\Contactusmessage;
use App\Entity\Image;
use App\Form\ImageType;
use App\Repository\ImageRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("admin/image")
 */
class ImageController extends AbstractController
{
    /**
     * @Route("/", name="image_index", methods={"GET"})
     */
    public function index(ImageRepository $imageRepository): Response
    {
        return $this->render('image/index.html.twig', ['images' => $imageRepository->findAll(),
            'countmessage' => $this->getcountmessages()
            ]);
    }

    /**
     * @Route("/new", name="image_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $image = new Image();
        $form = $this->createForm(ImageType::class, $image);
        $form->handleRequest($request);
        $file=$request->files->get('imagename');
        if ($request->isMethod('post') && $file!=null ) {

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }
            $entityManager = $this->getDoctrine()->getManager();

            $image->setName($fileName);
            $entityManager->persist($image);
            $entityManager->flush();

            return $this->redirectToRoute('image_index',['countmessage' => $this->getcountmessages()]);
        }

        return $this->render('image/new.html.twig', [
            'image' => $image,
            'form' => $form->createView(),
            'countmessage' => $this->getcountmessages()
        ]);
    }

    /**
     * @Route("/{id}", name="image_show", methods={"GET"})
     */
    public function show(Image $image): Response
    {
        return $this->render('image/show.html.twig', ['image' => $image,'countmessage' => $this->getcountmessages()]);
    }

    /**
     * @Route("/{id}/edit", name="image_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Image $image): Response
    {
        $form = $this->createForm(ImageType::class, $image);
        $form->handleRequest($request);
        $file=$request->files->get('imagename');
        if ($request->isMethod('post') && $file!=null ) {
            $this->getDoctrine()->getManager()->flush();


            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $image->getName()
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }


            return $this->redirectToRoute('image_index',['countmessage' => $this->getcountmessages()]);
        }

        return $this->render('image/edit.html.twig', [
            'image' => $image,
            'countmessage' => $this->getcountmessages(),
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="image_delete", methods={"DELETE"})
     */
    public function delete(Request $request, Image $image): Response
    {
        if ($this->isCsrfTokenValid('delete'.$image->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($image);
            $entityManager->flush();
        }

        return $this->redirectToRoute('image_index',['countmessage' => $this->getcountmessages()]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function getcountmessages(): int
    {
        $em = $this->getDoctrine()->getManager();
        $messages=$em->getRepository(Contactusmessage::class)->findBy(array('status'=>0));

        return sizeof($messages);
    }
}
